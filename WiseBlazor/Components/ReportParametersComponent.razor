
@if (Report?.Query?.Contains("$timeFilter") == true)
{
    <div class="form-row">
        <div class="form-group col-md-3">
            <label>Диапазон выгрузки</label>
            <DateRangePicker class="form-control" CustomRangeLabel="Выбрать" Ranges="DateRangeHelper.GetDefaultRanges()" @bind-StartDate="StartDate" @bind-EndDate="EndDate" Drops="DropsType.Up" />
        </div>
    </div>
}
else
{
    <div class="alert alert-info">Запрос не позволяет выбрать временной интервал для выгрузки</div>
}

@if (Report?.CustomParameters != null)
{
    @for (int i = 0; i < Report.CustomParameters.Count; i++)
    {
        var par = Report.CustomParameters[i];
        var parameterId = par.Id;
        <div class="form-row form-group align-items-center">
            @switch (par.Type)
            {
                case ReportCustomParameterType.Check:
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="par@(i)" @onchange="(e) => ValueChanged(parameterId, e)" />
                        <label class="form-check-label" for="par@(i)">@par.Title</label>
                    </div>
                    break;
                case ReportCustomParameterType.CustomString:
                    <div class="col-auto">
                        <label for="par@(i)">@par.Title</label>
                        <input id="par@(i)" class="form-control" type="text" @onchange="(e) => ValueChanged(parameterId, e)" />
                    </div>
                    break;
                default:
                    <div class="alert alert-info">Параметр этого типа не поддерживается</div>
                    break;
            }

        </div>
    }
}
else
{
    <div class="alert alert-info">У запроса нет параметров</div>
}

@code {

    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddDays(-7);

    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);

    private ReportRun _run = new ReportRun();
    private ReportConfiguration _report = new ReportConfiguration();

    [Parameter]
    public ReportConfiguration Report {
        get { return _report; }
        set {
            _report = value;
        }
    }

    [Parameter]
    public ReportRun Run {
        get {

            if (_report.CustomParameters != null)
            {
                if (_run.CustomParameterValues != null)
                {
                    var allkeys = _run.CustomParameterValues.Keys.ToList();
                    foreach (var key in allkeys)
                    {
                        if (!_report.CustomParameters.Any(p => p.Id == key))
                            _run.CustomParameterValues.Remove(key);
                    }
                }
            }
            else
                _run.CustomParameterValues = null;

            if (_report.Query?.Contains("$timeFilter") == true)
            {
                _run.QueryTimeFrom = StartDate.HasValue ? (DateTime?)StartDate.Value.DateTime : null;
                _run.QueryTimeTo = EndDate.HasValue ? (DateTime?)EndDate.Value.DateTime : null;
            }

            return _run;
        }
        set { _run = value; }
    }

    private void ValueChanged(int id, ChangeEventArgs e)
    {
        if (_run.CustomParameterValues == null)
            _run.CustomParameterValues = new Dictionary<int, object>();

        if (_run.CustomParameterValues.ContainsKey(id))
            _run.CustomParameterValues[id] = e.Value;
        else
            _run.CustomParameterValues.Add(id, e.Value);
    }

    protected override async Task OnInitializedAsync()
    {

    }

}
