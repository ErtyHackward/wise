@if (Report?.Query?.Contains("$timeFilter") == true)
{
    <div class="form-row">
        <div class="form-group col-auto">
            <label>Выбери, за какое время будем выгружать:</label>
            <DateRangePicker class="form-control" 
                             CustomRangeLabel="Выбрать" 
                             Ranges="DateRangeHelper.GetDefaultRanges()" 
                             @bind-StartDate="StartDate" 
                             @bind-EndDate="EndDate"  
                             Drops="DropsType.Up" 
                             ApplyLabel="Применить"
                             CancelLabel="Отмена"
                              />
        </div>
    </div>
}
else
{
    <div class="alert alert-info">Запрос не позволяет выбрать временной интервал для выгрузки</div>
}

@if (Report?.CustomParameters != null)
{
    @for (int i = 0; i < Report.CustomParameters.Count; i++)
    {
        var par = Report.CustomParameters[i];
        var parameterId = par.Id;
        <div class="form-row form-group align-items-center">
            @switch (par.Type)
            {
                case ReportCustomParameterType.Check:
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="par@(i)" @onchange="(e) => ValueChanged(parameterId, e)">
                        <label class="form-check-label" for="par@(i)">@par.Title</label>
                    </div>
                    break;
                case ReportCustomParameterType.CustomString:
                    <div class="col-auto">
                        <label for="par@(i)">@par.Title</label>
                        <input id="par@(i)" class="form-control" type="text" @onchange="(e) => ValueChanged(parameterId, e)">
                    </div>
                    break;
                default:
                    <div class="alert alert-info">Параметр этого типа не поддерживается</div>
                    break;
            }

        </div>
    }
}
else
{
    <div class="alert alert-info">У запроса нет параметров</div>
}

@code {

    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddDays(-7);

    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);

    private ReportRun _run = new ReportRun();

    [Parameter]
    public ReportConfiguration Report { get; set; } = new ReportConfiguration();

    [Parameter]
    public ReportRun Run {
        get {
            return _run;
        }
        set { 
            _run = value; 

            if (Report.CustomParameters != null)
            {
                if (_run.CustomParameterValues != null)
                {
                    var allkeys = _run.CustomParameterValues.Select(p => p.Id).ToList();
                    foreach (var key in allkeys)
                    {
                        if (!Report.CustomParameters.Any(p => p.Id == key))
                            _run.CustomParameterValues.RemoveAll(p => p.Id == key);
                    }
                }
            }
            else
                _run.CustomParameterValues = null;

            if (Report.Query?.Contains("$timeFilter") == true)
            {
                _run.QueryTimeFrom = StartDate?.DateTime;
                _run.QueryTimeTo = EndDate?.DateTime;
            }

        }
    }

    private void ValueChanged(int id, ChangeEventArgs e)
    {
        if (_run.CustomParameterValues == null)
            _run.CustomParameterValues = new List<WiseDomain.ParameterValue>();

        if (_run.CustomParameterValues.Any(p => p.Id == id))
        {
            var index = _run.CustomParameterValues.FindIndex(p => p.Id == id);
            _run.CustomParameterValues[index] = new WiseDomain.ParameterValue() { Id = id, Value = e.Value };
        }
        else
            _run.CustomParameterValues.Add(new WiseDomain.ParameterValue() { Id = id, Value = e.Value });
    }

    protected override async Task OnInitializedAsync()
    {

    }

}
