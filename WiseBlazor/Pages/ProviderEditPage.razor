@page "/providers/{Id:int}/edit"
@page "/providers/new"
@inject Backend Backend
@inject ILogger<Backend> Logger
@inject NavigationManager Nav
@inject IModalService Modal

<div class="page container">
    @if (Id == 0)
    {
        <h1>Создание нового источника данных</h1>
    }
    else
    {
        <h1>Редактирование источника данных</h1>
    }

    <div class="row">
        <div class="col-auto">
            <input class="form-control" id="titleEdit" type="text" placeholder="Название истоничка" @bind="_providerConfig.Title" />
            <textarea class="form-control" id="descriptionTextArea" placeholder="Описание для людей" @bind="_providerConfig.Description"></textarea>
            <div>
                <select class="form-control" id="providerSelect" value="@_providerConfig.DataProviderType" @onchange="@(e => UpdateDefaultConnectionString(e))">
                    <option disabled>Выбери тип провайдера</option>
                    @foreach (var provider in DataProviderConfiguration.BuiltInProviders)
                    {
                        <option value="@provider.CLRType">@provider.TypeTitle</option>
                    }
                </select>
            </div>
            <textarea class="form-control" id="connectionStringTextArea" placeholder="Строка подключения" @bind="_providerConfig.ConnectionString"></textarea>

            <div>
                <button class="btn btn-primary"
                        @onclick="@TestConnection">
                    <span class="oi oi-check" aria-hidden="true"></span> Проверить подключение
                </button>
                <button class="btn btn-success" id="btnSave"
                        @onclick="@SaveProvider">
                    <span class="oi oi-plus" aria-hidden="true"></span> Сохранить
                </button>
                <button class="btn btn-danger"
                        @onclick="@DeleteReport">
                    <span class="oi oi-trash" aria-hidden="true"></span> Удалить
                </button>
            </div>
        </div>
    </div>  
    @if (_displayPopoverId != null)
    {
        if (_switch) // fooling the blazor, we need to re-add popover to the DOM, and it is not possible without js right now
        {
            <BSPopover Target="@_displayPopoverId" IsOpen="@(_displayPopoverId != null)" Placement="Placement.Bottom">
                <BSPopoverBody><span class="oi oi-warning text-warning" aria-hidden="true"></span> @_popoverMessage</BSPopoverBody>
            </BSPopover>
        }
        else
        {
            <BSPopover Target="@_displayPopoverId" IsOpen="@(_displayPopoverId != null)" Placement="Placement.Bottom">
                <BSPopoverBody><span class="oi oi-warning text-warning" aria-hidden="true"></span> @_popoverMessage</BSPopoverBody>
            </BSPopover>
        }
    }
</div>

@code {

    [Parameter]
    public int Id
    {
        get { return _providerConfig.Id; }
        set { _providerConfig.Id = value; }
    }

    private ServerResponse<ReportResponse> _serverTestResponse;

    private DataProviderConfiguration _providerConfig = new DataProviderConfiguration();

    private string _displayPopoverId;
    private string _popoverMessage;
    private bool _switch;

    private void UpdateDefaultConnectionString(ChangeEventArgs e)
    {
        _providerConfig.DataProviderType = e.Value.ToString();

        if (string.IsNullOrEmpty(_providerConfig.ConnectionString) || DataProviderConfiguration.BuiltInProviders.Any(p => p.SampleConnectionString == _providerConfig.ConnectionString))
            _providerConfig.ConnectionString = DataProviderConfiguration.BuiltInProviders.FirstOrDefault(p => p.CLRType == _providerConfig.DataProviderType).SampleConnectionString;
    }

    private void ShowWarningPopover(string elementId, string message)
    {
        if (_displayPopoverId != null)
        {
            _switch = !_switch;
        }

        _displayPopoverId = elementId;
        _popoverMessage = message;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            Backend.GetApiAsync<DataProviderConfiguration>($"providers/{Id}").ContinueWith(t =>
            {
                InvokeAsync(() =>
                {
                    _providerConfig = t.Result.Response;
                    StateHasChanged();
                });
            });
        }
    }

    private async void TestConnection()
    {
        if (!ValidateProvider())
            return;

        _displayPopoverId = null;


        _serverTestResponse = await Backend.PostApiAsync<ReportResponse>("providers/test", _providerConfig);

        var parameters = new ModalParameters();
        parameters.Add("ReportResponse", _serverTestResponse);

        Modal.Show<QueryResultComponent>("Результат запроса", parameters);
    }

    private bool ValidateProvider()
    {
        if (string.IsNullOrWhiteSpace(_providerConfig.ConnectionString))
        {
            ShowWarningPopover("connectionStringTextArea", "Напиши строку подключения");
            return false;
        }
        if (string.IsNullOrWhiteSpace(_providerConfig.DataProviderType))
        {
            ShowWarningPopover("providerSelect", "Выбери тип провайдера");
            return false;
        }
        return true;
    }

    private async void SaveProvider()
    {
        if (string.IsNullOrWhiteSpace(_providerConfig.Title))
        {
            ShowWarningPopover("titleEdit", "Заполни название!");
            return;
        }
        if (string.IsNullOrWhiteSpace(_providerConfig.Description))
        {
            ShowWarningPopover("descriptionTextArea", "Заполни описание!");
            return;
        }
        if (!ValidateProvider())
            return;

        _displayPopoverId = null;
        StateHasChanged();

        ServerResponse response;

        if (Id == 0)
        {
            response = await Backend.PostApiAsync<DataProviderConfiguration>("providers", _providerConfig);
        }
        else
        {
            response = await Backend.PutApiAsync($"providers/{Id}", _providerConfig);
        }

        if (response.Success)
            Nav.NavigateTo("providers");
        else
            ShowWarningPopover("btnSave", response.ErrorText);
    }

    private async void DeleteReport()
    {
        if (Id == 0)
            Nav.NavigateTo("/providers");
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("ConfirmText", $"Вы уверены что хотите удалить отчет {_providerConfig.Title} ?");

            Modal.OnClose += ModalClosed;

            Modal.Show<ConfirmDialogComponent>("Подтвердите", parameters);

        }
    }

    async void ModalClosed(ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await Backend.DeleteApiAsync($"providers/{Id}");
            Nav.NavigateTo("reports");
        }
        Modal.OnClose -= ModalClosed;
    }
}

