@page "/reports/{Id:int}/edit"
@page "/reports/new"
@inject Backend Backend
@inject ILogger<Backend> Logger
@inject NavigationManager Nav
@inject IModalService Modal

    <div class="page">
        @if (Id == 0)
        {
            <h1>Создание нового отчета</h1>
        }
        else
        {
            <h1>Редактирование отчета</h1>
        }

        <div class="report-edit">
            <input class="form-control" id="titleEdit" type="text" placeholder="Название отчета" @bind="_reportConfig.Title" />
            <textarea class="form-control" id="descriptionTextArea" placeholder="Описание для людей" @bind="_reportConfig.Description"></textarea>
            <div>
                <select class="form-control" id="providerSelect" @bind="ProviderId">
                    @if (_providers == null)
                    {
                        <option selected disabled>Загрузка...</option>
                    }
                    else
                    {
                        <option disabled>Выбери источник</option>
                        @foreach (var provider in _providers)
                        {
                            <option value="@provider.DataProviderConfigurationId">@provider.Title</option>
                        }
                    }
                </select>
            </div>
            <textarea class="form-control" id="sqlTextArea" placeholder="Текст SQL запроса" @bind="_reportConfig.Query"></textarea>

            <div>
                <button class="btn btn-primary"
                        @onclick="@(e => TestQuery())">
                    <span class="oi oi-check" aria-hidden="true"></span> Проверить запрос
                </button>
                @if (Id == 0)
                {
                    <button class="btn btn-primary"
                            @onclick="@(e => UpdateReport())">
                        <span class="oi oi-plus" aria-hidden="true"></span> Добавить
                    </button>
                }
                <button class="btn btn-danger"
                        @onclick="@(e => Nav.NavigateTo("/"))">
                    <span class="oi oi-trash" aria-hidden="true"></span> Удалить
                </button>
            </div>
        </div>
        @if (_displayPopoverId != null)
        {
            if (_switch) // fooling the blazor, we need to re-add popover to the DOM, and it is not possible without js right now
            {
                <BSPopover Target="@_displayPopoverId" IsOpen="@(_displayPopoverId != null)" Placement="Placement.Bottom">
                    <BSPopoverBody><span class="oi oi-warning text-warning" aria-hidden="true"></span> @_popoverMessage</BSPopoverBody>
                </BSPopover>
            }
            else
            {
                <BSPopover Target="@_displayPopoverId" IsOpen="@(_displayPopoverId != null)" Placement="Placement.Bottom">
                    <BSPopoverBody><span class="oi oi-warning text-warning" aria-hidden="true"></span> @_popoverMessage</BSPopoverBody>
                </BSPopover>
            }
        }
    </div>

@code {

    [Parameter]
    public int Id {
        get { return _reportConfig.ReportConfigurationId; }
        set { _reportConfig.ReportConfigurationId = value; }
    }

    public int ProviderId { get; set; }

    private List<DataProviderConfiguration> _providers;

    private ServerResponse<ReportResponse> _serverTestResponse;

    private ReportConfiguration _reportConfig = new ReportConfiguration();

    private string _displayPopoverId;
    private string _popoverMessage;
    private bool _switch;

    private void ShowWarningPopover(string elementId, string message)
    {
        if (_displayPopoverId != null)
        {
            _switch = !_switch;
        }

        _displayPopoverId = elementId;
        _popoverMessage = message;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            Backend.GetApiAsync<ReportConfiguration>($"reports/{Id}").ContinueWith(t =>
            {
                InvokeAsync(() => { 
                    _reportConfig = t.Result.Response;
                    ProviderId = _reportConfig.DataProvider != null ? _reportConfig.DataProvider.DataProviderConfigurationId : 0;
                    StateHasChanged();
                });
            });
        }
        var resp = await Backend.GetApiAsync<List<DataProviderConfiguration>>("providers");
        _providers = resp.Response;

    }

    private async void TestQuery()
    {
        if (!ValidateQuery())
            return;

        _displayPopoverId = null;

        _reportConfig.DataProvider = new DataProviderConfiguration { DataProviderConfigurationId = ProviderId };

        _serverTestResponse = await Backend.PostApiAsync<ReportResponse>("reports/test", _reportConfig);

        var parameters = new ModalParameters();
        parameters.Add("ReportResponse", _serverTestResponse);

        Modal.Show<QueryResultComponent>("Результат запроса", parameters);
    }

    private bool ValidateQuery()
    {
        if (string.IsNullOrWhiteSpace(_reportConfig.Query))
        {
            ShowWarningPopover("sqlTextArea", "Напиши SQL запрос!");
            return false;
        }
        if (ProviderId == 0)
        {
            ShowWarningPopover("providerSelect", "Выбери провайдер!");
            return false;
        }
        return true;
    }

    private async void UpdateReport()
    {
        if (string.IsNullOrWhiteSpace(_reportConfig.Title))
        {
            ShowWarningPopover("titleEdit", "Заполни название!");
            return;
        }
        if (string.IsNullOrWhiteSpace(_reportConfig.Description))
        {
            ShowWarningPopover("descriptionTextArea", "Заполни описание!");
            return;
        }
        if (!ValidateQuery())
            return;

        _displayPopoverId = null;
        StateHasChanged();

        //
        //_serverResponse = null;
        //_serverResponse = await Backend.RequestAsync<List<ReportConfiguration>>("http://localhost:64460/api/reportconfigs");
        //StateHasChanged();
    }
}

