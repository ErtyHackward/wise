@page "/reports"
@inject HttpClient Http
@inject Backend Backend
@inject ILogger<Backend> Logger
@inject NavigationManager NavigationManager

<div class="page">
    <h1>Отчеты</h1>
    
    @if (_serverResponse == null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        if (!_serverResponse.Success)
        {
            <p><em>Не удалось загрузить: @_serverResponse.ErrorText </em></p>
        }
        else
        {
            <table class="table table-striped table-sm">
                <thead>
                    <tr>
                        <th>Название</th>
                        <th>Тип</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var report in _serverResponse.Response)
                    {
                        <tr>
                            <td class="trim-td">@report.Title</td>
                            <td class="trim-td">@report.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <div>
            <button class="btn btn-primary"
                    @onclick="@(e => UpdateReport())">
                <span class="oi oi-reload" aria-hidden="true"></span> Обновить
            </button>
            <button class="btn btn-primary"
                    @onclick="@(e => NavigationManager.NavigateTo("/report/new"))">
                <span class="oi oi-plus" aria-hidden="true"></span> Добавить
            </button>
        </div>
    }
</div>

@code {
    private ServerResponse<List<ReportConfiguration>> _serverResponse;

    protected override async Task OnInitializedAsync()
    {
        UpdateReport();
    }

    private async void UpdateReport()
    {
        _serverResponse = null;
        _serverResponse = await Backend.GetAsync<List<ReportConfiguration>>("http://localhost:64460/api/reports");
        StateHasChanged();
    }
}

