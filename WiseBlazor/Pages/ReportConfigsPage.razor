@page "/reports"
@inject HttpClient Http
@inject Backend Backend
@inject ILogger<Backend> Logger
@inject NavigationManager NavigationManager
@inject HubConnectionBuilder HubConnectionBuilder

<div class="page container">
    <div class="row">
        <div class="col-auto">
            <h1>Отчеты</h1>

            @if (_serverResponse == null)
            {
                <p><em>Загрузка...</em></p>
            }
            else
            {
                if (!_serverResponse.Success)
                {
                    <p><em>Не удалось загрузить: @_serverResponse.ErrorText </em></p>
                }
                else
                {
                    <table class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Название</th>
                                <th>Тип</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var report in _serverResponse.Response)
                            {
                                <tr>
                                    <td class="trim-td"><a href="/reports/@report.Id">@report.Title</a></td>
                                    <td class="trim-td">@report.Description</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

                <div>
                    <button class="btn btn-primary"
                            @onclick="@(e => UpdateReport())">
                        <span class="oi oi-reload" aria-hidden="true"></span> Обновить
                    </button>
                    <button class="btn btn-primary"
                            @onclick="@(e => NavigationManager.NavigateTo("/reports/new"))">
                        <span class="oi oi-plus" aria-hidden="true"></span> Добавить
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ServerResponse<List<ReportConfiguration>> _serverResponse;

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        UpdateReport();

        _hubConnection = HubConnectionBuilder.WithUrl("http://localhost:64460/reportsHub", opt => { opt.Transport = HttpTransportType.WebSockets; opt.SkipNegotiation = true; }).Build();
        _hubConnection.On<string>("ReportsListChanged", ListChanged);

        _hubConnection.OnClose(exc =>
            {
                Console.WriteLine("Connection was closed! " + exc.ToString());
                return Task.CompletedTask;
            });

        await _hubConnection.StartAsync();
    }

    private Task ListChanged(string msg)
    {
        UpdateReport();
        return Task.CompletedTask;
    }

    private async void UpdateReport()
    {
        _serverResponse = null;
        _serverResponse = await Backend.GetApiAsync<List<ReportConfiguration>>("reports");
        StateHasChanged();
    }
}

