@page "/reports/{Id:int}/edit"
@page "/reports/new"
@inject Backend Backend
@inject ILogger<Backend> Logger
@inject NavigationManager Nav
@inject IModalService Modal
@attribute [Authorize]

<div class="page container">
    @if (Id == 0)
    {
        <h1>Создание нового отчета</h1>
    }
    else
    {
        <h1>Редактирование отчета</h1>
    }

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="titleEdit">Название отчета</label>
            <input class="form-control" id="titleEdit" type="text" @bind="_reportConfig.Title">
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="descriptionTextArea">Описание для людей</label>
            <textarea class="form-control" id="descriptionTextArea" rows="6" @bind="_reportConfig.Description"></textarea>
            <small id="descriptionHelp" class="form-text text-muted">Опиши так чтобы пользователю было понятно, используй Markdown чтобы сделать описание выразительнее</small>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group">
            <button class="btn btn-primary"
                    @onclick="@TestMarkdown">
                <span class="oi oi-eye" aria-hidden="true"></span> Предпросмотр
            </button>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-3">
            <label for="providerSelect">Источник данных</label>
            <select class="form-control" id="providerSelect" @bind="ProviderId">
                @if (_providers == null)
                {
                    <option selected disabled>Загрузка...</option>
                }
                else
                {
                    <option disabled>Выбери источник</option>
                    @foreach (var provider in _providers)
                    {
                        <option value="@provider.Id">@provider.Title</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="sqlTextArea">Текст SQL запроса</label>
            <textarea class="form-control sql-text" id="sqlTextArea" placeholder="" rows="6" @bind="_reportConfig.Query"></textarea>
            <small id="sqlTextHelp" class="form-text text-muted">Подставь в запрос параметры в виде <span class="sql-text">$myParam</span>, чтобы задать время <span class="sql-text">WHERE timestamp $timeFilter</span></small>
        </div>
    </div>
    <hr>
    <h2>Параметры запроса</h2>
    @if (_reportConfig.CustomParameters != null)
    {
        @for (int i = 0; i < _reportConfig.CustomParameters.Count; i++)
        {
            var par = _reportConfig.CustomParameters[i];
            var parameterId = par.Id;
            var index = i;
            <form>
                <div class="form-row form-group align-items-center">
                    <div class="col-auto">
                        <input class="form-control" type="text" placeholder="Название параметра" @bind="par.Title">
                    </div>
                    <div class="col-auto">
                        <input class="form-control sql-text" type="text" placeholder="Идентификатор параметра" @bind="par.QueryId">
                    </div>
                    <div class="col-auto">
                        <select class="form-control" @bind="par.Type">
                            @foreach (ReportCustomParameterType paramType in Enum.GetValues(typeof(ReportCustomParameterType)))
                            {
                                <option value="@paramType">@paramType.ToLabel()</option>
                            }
                        </select>
                    </div>
                    <div class="col-auto">
                        <input class="form-control sql-text" type="text" placeholder="Значение параметра" @bind="par.QueryValue">
                    </div>
                    <div class="col-auto">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="checkPar@(i)" @bind="par.Required">
                            <label class="form-check-label" for="checkPar@(i)">Обязательный</label>
                        </div>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-danger" @onclick="@(() => _reportConfig.CustomParameters.Remove(par))">
                            <span class="oi oi-trash" aria-hidden="true"></span> Удалить
                        </button>
                    </div>
                </div>
            </form>
        }
    }
    <button class="btn btn-primary" @onclick="@AddParameter">
        <span class="oi oi-plus" aria-hidden="true"></span> Добавить параметр
    </button>
    <hr>
    <h2>Проверка запроса</h2>

    <ReportParametersComponent Report="_reportConfig" Run="_run" />

    <div class="form-row">
        <div class="form-group">
            <button class="btn btn-primary"
                    @onclick="@TestQuery">
                <span class="oi oi-check" aria-hidden="true"></span> Проверить запрос
            </button>
        </div>
    </div>
    <hr>
    <div>
        <button class="btn btn-success" id="btnSave"
                @onclick="@SaveReport">
            <span class="oi oi-plus" aria-hidden="true"></span> Сохранить
        </button>
        <button class="btn btn-danger"
                @onclick="@DeleteReport">
            <span class="oi oi-trash" aria-hidden="true"></span> Удалить
        </button>
    </div>

    @if (_displayPopoverId != null)
    {
        if (_switch) // fooling the blazor, we need to re-add popover to the DOM, and it is not possible without js right now
        {
            <BSPopover Target="@_displayPopoverId" IsOpen="@(_displayPopoverId != null)" Placement="Placement.Bottom">
                <BSPopoverBody><span class="oi oi-warning text-warning" aria-hidden="true"></span> @_popoverMessage</BSPopoverBody>
            </BSPopover>
        }
        else
        {
            <BSPopover Target="@_displayPopoverId" IsOpen="@(_displayPopoverId != null)" Placement="Placement.Bottom">
                <BSPopoverBody><span class="oi oi-warning text-warning" aria-hidden="true"></span> @_popoverMessage</BSPopoverBody>
            </BSPopover>
        }
    }
</div>

@code {

    [Parameter]
    public int Id
    {
        get { return _reportConfig.Id; }
        set { _reportConfig.Id = value; }
    }

    public int ProviderId { get; set; }

    private List<DataProviderConfiguration> _providers;

    private ServerResponse<ReportResponse> _serverTestResponse;

    private ReportConfiguration _reportConfig = new ReportConfiguration();

    private ReportRun _run = new ReportRun();

    private string _displayPopoverId;
    private string _popoverMessage;
    private bool _switch;

    private void ShowWarningPopover(string elementId, string message)
    {
        if (_displayPopoverId != null)
        {
            _switch = !_switch;
        }

        _displayPopoverId = elementId;
        _popoverMessage = message;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            Backend.GetApiAsync<ReportConfiguration>($"reports/{Id}").ContinueWith(t =>
            {
                InvokeAsync(() =>
                {
                    _reportConfig = t.Result.Response;
                    ProviderId = _reportConfig.DataProvider != null ? _reportConfig.DataProvider.Id : 0;
                    StateHasChanged();
                });
            });
        }
        var resp = await Backend.GetApiAsync<List<DataProviderConfiguration>>("providers");
        _providers = resp.Response;

    }

    private async void TestMarkdown()
    {
        var parameters = new ModalParameters();
        parameters.Add("MarkdownRaw", _reportConfig.Description);

        Modal.Show<MarkdownModalComponent>("Предпросмотр", parameters);
    }

    private void AddParameter()
    {
        if (_reportConfig.CustomParameters == null)
            _reportConfig.CustomParameters = new List<ReportCustomParameter>();

        var id = _reportConfig.CustomParameters.Min(p => p.Id);

        if (id > 0)
            id = 0;

        id--; // we use negative id for object not yet saved

        _reportConfig.CustomParameters.Add(new ReportCustomParameter() { Id = id });
        StateHasChanged();
    }

    private async void TestQuery()
    {
        Logger.LogInformation("validating query");
        if (!ValidateQuery())
            return;

        _displayPopoverId = null;

        _reportConfig.DataProvider = new DataProviderConfiguration { Id = ProviderId };

        _run.Report = _reportConfig;

        _serverTestResponse = await Backend.PostApiAsync<ReportResponse>("reports/test", _run);

        var parameters = new ModalParameters();
        parameters.Add("ReportResponse", _serverTestResponse);

        Modal.Show<QueryResultComponent>("Результат запроса", parameters);
    }

    private bool ValidateQuery()
    {
        if (string.IsNullOrWhiteSpace(_reportConfig.Query))
        {
            ShowWarningPopover("sqlTextArea", "Напиши SQL запрос!");
            return false;
        }
        if (ProviderId == 0)
        {
            ShowWarningPopover("providerSelect", "Выбери провайдер!");
            return false;
        }
        return true;
    }

    private async void DeleteReport()
    {
        if (Id == 0)
            Nav.NavigateTo("/reports");
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("ConfirmText", $"Вы уверены что хотите удалить отчет {_reportConfig.Title} ?");

            Modal.OnClose += ModalClosed;
            Modal.Show<ConfirmDialogComponent>("Подтвердите", parameters);
        }
    }

    async void ModalClosed(ModalResult modalResult)
    {
        if (!modalResult.Cancelled)
        {
            await Backend.DeleteApiAsync($"reports/{Id}");
            Nav.NavigateTo("reports");
        }
        Modal.OnClose -= ModalClosed;
    }

    private async void SaveReport()
    {
        if (string.IsNullOrWhiteSpace(_reportConfig.Title))
        {
            ShowWarningPopover("titleEdit", "Заполни название!");
            return;
        }
        if (string.IsNullOrWhiteSpace(_reportConfig.Description))
        {
            ShowWarningPopover("descriptionTextArea", "Заполни описание!");
            return;
        }
        if (!ValidateQuery())
            return;

        _displayPopoverId = null;
        StateHasChanged();

        _reportConfig.DataProvider = new DataProviderConfiguration { Id = ProviderId };

        if (_reportConfig.CustomParameters != null)
        {
            foreach (var par in _reportConfig.CustomParameters)
            {
                if (par.Id < 0) // it's a new parameter
                    par.Id = 0;
            }
        }

        ServerResponse response;

        if (Id == 0)
        {
            response = await Backend.PostApiAsync<ReportConfiguration>("reports", _reportConfig);
        }
        else
        {
            response = await Backend.PutApiAsync($"reports/{Id}", _reportConfig);
        }

        if (response.Success)
            Nav.NavigateTo("reports");
        else
            ShowWarningPopover("btnSave", response.ErrorText);
    }
}

